AWSTemplateFormatVersion: '2010-09-09'
Description: 'Integrated Data Pipeline Stack for Game Log Analytics - Ubuntu 20.04 LTS'

Parameters:
  # Ubuntu 20.04 LTS AMI를 자동으로 가져오는 파라미터
  LatestUbuntuAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id
    Description: Latest Ubuntu 20.04 LTS AMI ID from Systems Manager Parameter Store
  
  # 기본 파라미터들
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
    Description: EC2 instance type for the log analysis server
  
  KeyPairName:
    Type: String
    Default: ""
    Description: Name of an existing EC2 KeyPair to enable SSH access (optional - leave empty to disable SSH)
  
  VpcId:
    Type: String
    Default: ""
    Description: VPC ID where the instance will be launched (optional - will use default VPC if empty)
  
  SubnetId:
    Type: String
    Default: ""
    Description: Subnet ID where the instance will be launched (optional - will use default subnet if empty)
  
  AllowedCidr:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR block allowed to access the instance
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$

Conditions:
  HasKeyPair: !Not [!Equals [!Ref KeyPairName, ""]]
  HasVpcId: !Not [!Equals [!Ref VpcId, ""]]
  HasSubnetId: !Not [!Equals [!Ref SubnetId, ""]]

Resources:
  # Security Group for Log Analysis Server
  LogAnalysisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Game Log Analysis Server
      VpcId: !If [HasVpcId, !Ref VpcId, !Ref "AWS::NoValue"]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedCidr
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref AllowedCidr
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref AllowedCidr
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref AllowedCidr
          Description: Application port
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-log-analysis-sg"
        - Key: Purpose
          Value: GameLogAnalysis

  # IAM Role for EC2 Instance
  LogAnalysisInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub "${LogAnalysisS3Bucket}/*"
                  - !Ref LogAnalysisS3Bucket
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                Resource: "*"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-log-analysis-role"

  # Instance Profile
  LogAnalysisInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref LogAnalysisInstanceRole

  # S3 Bucket for Log Storage
  LogAnalysisS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-game-logs-${AWS::AccountId}-${AWS::Region}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 90
            NoncurrentVersionExpirationInDays: 30
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-game-logs-bucket"
        - Key: Purpose
          Value: GameLogAnalysis

  # CloudWatch Log Group
  LogAnalysisLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/ec2/${AWS::StackName}/game-log-analysis"
      RetentionInDays: 30

  # EC2 Instance for Log Analysis
  LogAnalysisInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestUbuntuAmiId
      InstanceType: !Ref InstanceType
      KeyName: !If [HasKeyPair, !Ref KeyPairName, !Ref "AWS::NoValue"]
      SubnetId: !If [HasSubnetId, !Ref SubnetId, !Ref "AWS::NoValue"]
      SecurityGroupIds:
        - !Ref LogAnalysisSecurityGroup
      IamInstanceProfile: !Ref LogAnalysisInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          
          # Update system
          apt-get update -y
          apt-get upgrade -y
          
          # Install essential packages
          apt-get install -y \
            python3 \
            python3-pip \
            python3-venv \
            docker.io \
            docker-compose \
            awscli \
            htop \
            curl \
            wget \
            unzip \
            git \
            jq
          
          # Install AWS CLI v2
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          rm -rf aws awscliv2.zip
          
          # Install CloudWatch Agent
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
          dpkg -i amazon-cloudwatch-agent.deb
          rm amazon-cloudwatch-agent.deb
          
          # Configure CloudWatch Agent
          cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'
          {
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/game-analytics/*.log",
                      "log_group_name": "${LogAnalysisLogGroup}",
                      "log_stream_name": "{instance_id}/game-analytics",
                      "timezone": "UTC"
                    },
                    {
                      "file_path": "/var/log/syslog",
                      "log_group_name": "${LogAnalysisLogGroup}",
                      "log_stream_name": "{instance_id}/syslog",
                      "timezone": "UTC"
                    }
                  ]
                }
              }
            },
            "metrics": {
              "namespace": "GameLogAnalysis",
              "metrics_collected": {
                "cpu": {
                  "measurement": ["cpu_usage_idle", "cpu_usage_iowait", "cpu_usage_user", "cpu_usage_system"],
                  "metrics_collection_interval": 60
                },
                "disk": {
                  "measurement": ["used_percent"],
                  "metrics_collection_interval": 60,
                  "resources": ["*"]
                },
                "mem": {
                  "measurement": ["mem_used_percent"],
                  "metrics_collection_interval": 60
                }
              }
            }
          }
          EOF
          
          # Start CloudWatch Agent
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
            -a fetch-config \
            -m ec2 \
            -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
            -s
          
          # Create application directories
          mkdir -p /opt/game-log-analytics
          mkdir -p /var/log/game-analytics
          
          # Set up Python virtual environment
          cd /opt/game-log-analytics
          python3 -m venv venv
          source venv/bin/activate
          
          # Install Python packages for log analysis
          pip install --upgrade pip
          pip install \
            pandas \
            numpy \
            matplotlib \
            seaborn \
            jupyter \
            boto3 \
            elasticsearch \
            kafka-python \
            redis \
            psycopg2-binary \
            sqlalchemy \
            flask \
            fastapi \
            uvicorn
          
          # Start Docker service
          systemctl enable docker
          systemctl start docker
          usermod -aG docker ubuntu
          
          # Create a simple log analysis service
          cat > /opt/game-log-analytics/app.py << 'EOF'
          from flask import Flask, jsonify, request
          import boto3
          import json
          import logging
          from datetime import datetime
          
          app = Flask(__name__)
          logging.basicConfig(level=logging.INFO)
          
          # AWS clients
          s3_client = boto3.client('s3')
          
          @app.route('/health')
          def health_check():
              return jsonify({'status': 'healthy', 'timestamp': datetime.utcnow().isoformat()})
          
          @app.route('/upload-log', methods=['POST'])
          def upload_log():
              try:
                  log_data = request.get_json()
                  bucket_name = '${LogAnalysisS3Bucket}'
                  key = f"logs/{datetime.utcnow().strftime('%Y/%m/%d')}/{datetime.utcnow().isoformat()}.json"
                  
                  s3_client.put_object(
                      Bucket=bucket_name,
                      Key=key,
                      Body=json.dumps(log_data),
                      ContentType='application/json'
                  )
                  
                  return jsonify({'message': 'Log uploaded successfully', 'key': key})
              except Exception as e:
                  return jsonify({'error': str(e)}), 500
          
          if __name__ == '__main__':
              app.run(host='0.0.0.0', port=8080)
          EOF
          
          # Create systemd service for the app
          cat > /etc/systemd/system/game-log-analytics.service << 'EOF'
          [Unit]
          Description=Game Log Analytics Service
          After=network.target
          
          [Service]
          Type=simple
          User=ubuntu
          WorkingDirectory=/opt/game-log-analytics
          Environment=PATH=/opt/game-log-analytics/venv/bin
          ExecStart=/opt/game-log-analytics/venv/bin/python app.py
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Enable and start the service
          systemctl daemon-reload
          systemctl enable game-log-analytics
          systemctl start game-log-analytics
          
          # Set proper permissions
          chown -R ubuntu:ubuntu /opt/game-log-analytics
          chown -R ubuntu:ubuntu /var/log/game-analytics
          
          # Signal CloudFormation that the instance is ready
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource LogAnalysisInstance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-log-analysis-server"
        - Key: Purpose
          Value: GameLogAnalysis
        - Key: OS
          Value: Ubuntu-20.04-LTS
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M

Outputs:
  InstanceId:
    Description: Instance ID of the Log Analysis Server
    Value: !Ref LogAnalysisInstance
    Export:
      Name: !Sub "${AWS::StackName}-InstanceId"
  
  InstancePublicIP:
    Description: Public IP address of the Log Analysis Server
    Value: !GetAtt LogAnalysisInstance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-PublicIP"
  
  InstancePrivateIP:
    Description: Private IP address of the Log Analysis Server
    Value: !GetAtt LogAnalysisInstance.PrivateIp
    Export:
      Name: !Sub "${AWS::StackName}-PrivateIP"
  
  S3BucketName:
    Description: Name of the S3 bucket for log storage
    Value: !Ref LogAnalysisS3Bucket
    Export:
      Name: !Sub "${AWS::StackName}-S3Bucket"
  
  ApplicationURL:
    Description: URL to access the log analysis application
    Value: !Sub "http://${LogAnalysisInstance.PublicIp}:8080"
    Export:
      Name: !Sub "${AWS::StackName}-AppURL"
  
  SSHCommand:
    Condition: HasKeyPair
    Description: SSH command to connect to the instance
    Value: !Sub "ssh -i ${KeyPairName}.pem ubuntu@${LogAnalysisInstance.PublicIp}"
    Export:
      Name: !Sub "${AWS::StackName}-SSHCommand"
  
  CloudWatchLogGroup:
    Description: CloudWatch Log Group for the application
    Value: !Ref LogAnalysisLogGroup
    Export:
      Name: !Sub "${AWS::StackName}-LogGroup"
